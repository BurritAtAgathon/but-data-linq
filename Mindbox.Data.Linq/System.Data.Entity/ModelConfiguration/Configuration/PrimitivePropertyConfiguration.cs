using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Linq.SqlClient;
using System.Reflection;
using Mindbox.Data.Linq.Mapping;

namespace System.Data.Entity.ModelConfiguration.Configuration
{
	/// <summary>
	/// Used to configure a primitive property of an entity type or complex type.
	/// </summary>
	public class PrimitivePropertyConfiguration
	{
		private readonly PropertyInfo property;
		private string columnName;
		private string columnType;
		private bool? canBeNull;


		internal PrimitivePropertyConfiguration(PropertyInfo property)
		{
			if (property == null)
				throw new ArgumentNullException("property");

			this.property = property;
		}


		/// <summary>
		/// Configures the property to be optional.
		/// The database column used to store this property will be nullable.
		/// </summary>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration IsOptional()
		{
			if (canBeNull == false)
				throw new InvalidOperationException("canBeNull == false");

			canBeNull = true;
			return this;
		}

		/// <summary>
		/// Configures the property to be required.
		/// The database column used to store this property will be non-nullable.
		/// </summary>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration IsRequired()
		{
			if (canBeNull == true)
				throw new InvalidOperationException("canBeNull == true");

			canBeNull = false;
			return this;
		}

		/// <summary>
		/// Configures how values for the property are generated by the database.
		/// </summary>
		/// <param name="databaseGeneratedOption">
		/// The pattern used to generate values for the property in the database.
		/// Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
		/// on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
		/// set of conventions are being used.
		/// </param>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration HasDatabaseGeneratedOption(
			DatabaseGeneratedOption? databaseGeneratedOption)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Configures the property to be used as an optimistic concurrency token.
		/// </summary>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration IsConcurrencyToken()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Configures whether or not the property is to be used as an optimistic concurrency token.
		/// </summary>
		/// <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration IsConcurrencyToken(bool? concurrencyToken)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Configures the data type of the database column used to store the property.
		/// </summary>
		/// <param name="columnType"> Name of the database provider specific data type. </param>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration HasColumnType(string columnType)
		{
			if (string.IsNullOrEmpty(columnType))
				throw new ArgumentException("string.IsNullOrEmpty(columnType)", "columnType");
			if ((this.columnType != null) && (this.columnType != columnType))
				throw new ArgumentException("(this.columnType != null) && (this.columnType != columnType)", "columnType");

			this.columnType = columnType;
			return this;
		}

		/// <summary>
		/// Configures the name of the database column used to store the property.
		/// </summary>
		/// <param name="columnName"> The name of the column. </param>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration HasColumnName(string columnName)
		{
			if (string.IsNullOrEmpty(columnName))
				throw new ArgumentException("string.IsNullOrEmpty(columnName)", "columnName");
			if ((this.columnName != null) && (this.columnName != columnName))
				throw new ArgumentException("(this.columnName != null) && (this.columnName != columnName)", "columnName");

			this.columnName = columnName;
			return this;
		}

		/// <summary>
		/// Configures the order of the database column used to store the property.
		/// This method is also used to specify key ordering when an entity type has a composite key.
		/// </summary>
		/// <param name="columnOrder"> The order that this column should appear in the database table. </param>
		/// <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
		public PrimitivePropertyConfiguration HasColumnOrder(int? columnOrder)
		{
			if (columnOrder < 0)
				throw new ArgumentOutOfRangeException("columnOrder");

			throw new NotImplementedException();
		}


		protected virtual string BuildDbTypeWithoutNullability(Linq.Mapping.ColumnAttribute columnAttribute)
		{
			if (columnAttribute == null)
				throw new ArgumentNullException("columnAttribute");

			return columnType;
		}


		internal ColumnAttributeByMember GetColumnAttribute()
		{
			var columnAttribute = new Linq.Mapping.ColumnAttribute
			{
				Name = columnName,
				CanBeNull = canBeNull ?? 
					TypeSystem.IsNullableType(property.PropertyType) || !property.PropertyType.IsValueType
			};
			columnAttribute.DbType = BuildDbType(columnAttribute);
			return new ColumnAttributeByMember
			{
				Member = property,
				Attribute = columnAttribute
			};
		}


		private string BuildDbType(Linq.Mapping.ColumnAttribute columnAttribute)
		{
			if (columnAttribute == null)
				throw new ArgumentNullException("columnAttribute");

			var dbTypeWithoutNullability = BuildDbTypeWithoutNullability(columnAttribute);
			return dbTypeWithoutNullability == null ? 
				null : 
				dbTypeWithoutNullability + (columnAttribute.CanBeNull ? " null" : " not null");
		}
	}
}
